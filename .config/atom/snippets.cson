'.source.coffee':
  'Log Variable':
    prefix: 'vlog'
    body:
      '''
      console.info '$1', $1
      '''
  'catch err':
    prefix: 'cerr'
    body: 'return callback err if err'
  'Express Route':
    prefix: 'route'
    body:
      '''
      method: '${1:GET}'
      path: '/$2'
      auth: '${1:admin}'
      handler: ( req, res, next ) ->
        return next new NotImplementedError()
      '''
  '$db.findOne':
    prefix: 'findone'
    body:
      '''
      $1_query =
        _id: ObjectID( $1_id )

      $db.collection('$1s').findOne $1_query, ( err, $1_doc ) ->
        return callback new MongoDbError err if err
        return callback new NotFoundError() if ! $1_doc
      '''
  '$db.find':
    prefix: 'find'
    body:
      '''
      $db.collection('$1s').find $1_query, ( err, $1_docs ) ->
        return callback new MongoDbError err if err
      '''
  '$db.update':
    prefix: 'update'
    body:
      '''
      $db.collection('$1s').update $1_criteria, $1_update, ( err, updated_count ) ->
        return callback new MongoDbError err if err
      '''
  '$db.findAndModify':
    prefix: 'modify'
    body:
      '''
      $db.collection('$1s').findAndModify $1_query, {}, $1_update, { 'new': ${2:true} }, ( err, $1_doc ) ->
        return callback new MongoDbError err if err
      '''
  'method':
    prefix: 'md'
    body:
      '''
      # @method $1
      $1: ( $2 ) ->
      '''
  'async.auto2':
    prefix: 'aa2'
    body:
      '''
      $1 =
        $2: ( callback ) ->
          return callback null, $2
        $3: [ '$2', ( callback, results ) ->
          { $2 } = results
          return callback null, $3
        ]

      async.auto tasks, ( err, results ) ->
        return callback err if err
        { $2, $3 } = results
      '''
  'async.auto3':
    prefix: 'aa3'
    body:
      '''
      $1 =
        $2: ( callback ) ->
          return callback null, $2
        $3: [ '$2', ( callback, results ) ->
          { $2 } = results
          return callback null, $3
        ]
        $4: [ '$2', '$3', ( callback, results ) ->
          { $2, $3 } = results
          return callback null, $4
        ]

      async.auto tasks, ( err, results ) ->
        return callback err if err
        { $2, $3, $4 } = results
      '''
  'async.task':
    prefix: 'aat'
    body:
      '''
      $1: ( callback ) ->
        $2
        return callback null, $1
      '''
  'async.task1':
    prefix: 'aat1'
    body:
      '''
      $1: [ '$2', ( callback, results ) ->
        { $2 } = results
        $3
        return callback null, $1
      ]
      '''
  'async.task2':
    prefix: 'aat2'
    body:
      '''
      $1: [ '$2', '$3', ( callback, results ) ->
        { $2, $3 } = results
        return callback null, $1
      ]
      '''
  'async.task3':
    prefix: 'aat3'
    body:
      '''
      $1: [ '$2', '$3', '$4', ( callback, results ) ->
        { $2, $3, $4 } = results
        return callback null, $1
      ]
      '''
  'script':
    prefix: 'scrp'
    body:
      '''
      # @method $1
      $1: ( $2 ) ->
        deferred = Q.defer()

        deferred.resolve()

        return deferred.promise
      '''

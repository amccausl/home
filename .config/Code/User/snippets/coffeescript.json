{
/*
   // Place your snippets for CoffeeScript here. Each snippet is defined under a snippet name and has a prefix, body and
   // description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
   // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the
   // same ids are connected.
   // Example:
   "Print to console": {
    "prefix": "log",
    "body": [
      "console.log('$1');",
      "$2"
    ],
    "description": "Log output to console"
  }
*/
  "Log Variable": {
    "prefix": "vlog",
    "body": [
      "console.info '$1', $1$0"
    ]
  },
  "Catch err with callback": {
    "prefix": "cerr",
    "body": [
      "return callback err if err",
      "$0"
    ]
  },
  "Catch mongo err with callback": {
    "prefix": "merr",
    "body": [
      "return callback new MongoDbError err if err",
      "$0"
    ]
  },
  "nextTick callback": {
    "prefix": "ntc",
    "body": [
      "process.nextTick () -> callback null$0"
    ]
  },
  "$db.find Array": {
    "prefix": "finda",
    "body": [
      "$1s_query =",
      "  $2",
      "",
      "\\$db.collection( '$1s' ).find( $1s_query ).toArray ( err, $1_docs ) ->",
      "  return callback new MongoDbError err if err",
      "  $0",
      "  return callback null, $1_docs"
    ],
    "description": "Create standard mongo find boilerplate with toArray"
  },
  "$db.find Cursor": {
    "prefix": "findc",
    "body": [
      "$1_query =",
      "  _id: ObjectID( $1_id )",
      "",
      "\\$db.collection( '$1s' ).find( $1_query ).toArray ( err, $1_docs ) ->",
      "  return callback new MongoDbError err if err",
      "$0"
    ],
    "description": "Create standard mongo find boilerplate with cursor"
  },
  "$db.find forEach": {
    "prefix": "findf",
    "body": [
      "$1s_query =",
      "  $2",
      "",
      "\\$db.collection( '$1s' ).find( $1s_query ).forEach(",
      "  ( $1_doc ) ->",
      "    ",
      "  ( err ) ->",
      "    return callback new MongoDbError err if err",
      "    $0",
      ")"
    ],
    "description": "Create standard mongo find boilerplate with cursor"
  },
  "$db.findOne": {
    "prefix": "findone",
    "body": [
      "$1_query =",
      "  '_id': $1_object_id",
      "",
      "\\$db.collection( '$1s' ).find( $1_query ).limit( 1 ).next ( err, $1_doc ) ->",
      "  return callback new MongoDbError err if err",
      "  return callback new NotFoundError() if ! $1_doc",
      "$0"
    ],
    "description": "Create standard mongo findOne boilerplate"
  },
  "$db.insertOne": {
    "prefix": "insertone",
    "body": [
      "\\$db.collection( '$1s' ).insertOne $1_doc, ( err, result ) ->",
      "  return callback new MongoDbError err if err?",
      "  return callback new Error('insert failed') if result.insertedCount != 1",
      "  $1_doc._id = result.insertedId",
      "  $0"
    ],
    "description": "Create standard mongo findOne boilerplate"
  },
  "$db.updateOne": {
    "prefix": "updateone",
    "body": [
      "$1_criteria =",
      "  '_id': $1_object_id",
      "",
      "\\$db.collection( '$1s' ).updateOne $1_criteria, $1_update, ( err, result ) ->",
      "  return callback new MongoDbError err if err?",
      "  return callback new Error('update failed') if result.modifiedCount != 1",
      "  $0"
    ],
    "description": "Create standard mongo findOne boilerplate"
  },
  "$db.replaceOne": {
    "prefix": "replaceone",
    "body": [
      "$1_criteria =",
      "  '_id': $1_object_id",
      "",
      "\\$db.collection( '$1s' ).replaceOne $1_criteria, $1_doc, { upsert: true }, ( err, result ) ->",
      "  return callback new MongoDbError err if err?",
      "  return callback new Error('update failed') if result.modifiedCount != 1",
      "  $0"
    ],
    "description": "Create standard mongo findOne boilerplate"
  },
  "async.auto": {
    "prefix": "aauto",
    "body": [
      "tasks =",
      "  $1: $0",
      "",
      "async.auto tasks, ( err, results ) ->",
      "  return callback err if err",
      "  { $1 } = results",
      "  return callback null"
    ],
    "description": "Create async.auto boilerplate"
  },
  "async.auto task": {
    "prefix": "aat",
    "body": [
      "( callback ) ->",
      "  $0",
      "  return callback null"
    ],
    "description": "Create async.auto task boilerplate"
  },
  "async.auto task1": {
    "prefix": "aat1",
    "body": [
      "[ '$1', ( callback, results ) ->",
      "  { $1 } = results",
      "  $0",
      "  return callback null",
      "]"
    ],
    "description": "Create async.auto task boilerplate (1 dep)"
  },
  "async.auto task2": {
    "prefix": "aat2",
    "body": [
      "[ '$1', '$2', ( callback, results ) ->",
      "  { $1, $2 } = results",
      "  $0",
      "  return callback null",
      "]"
    ],
    "description": "Create async.auto task boilerplate (2 dep)"
  },
  "async.auto task3": {
    "prefix": "aat3",
    "body": [
      "[ '$1', '$2', '$3', ( callback, results ) ->",
      "  { $1, $2, $3 } = results",
      "  $0",
      "  return callback null",
      "]"
    ],
    "description": "Create async.auto task boilerplate (3 dep)"
  }
}
